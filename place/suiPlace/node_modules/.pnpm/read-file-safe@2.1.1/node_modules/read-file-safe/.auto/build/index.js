import fs, { promises } from "fs";
import zlib from "zlib";
const decompressionMethods = {
    none: {
        sync: (buffer)=>buffer,
        async: (buffer, callback)=>{
            callback(null, buffer);
        }
    },
    gzip: {
        sync: zlib.unzipSync,
        async: zlib.unzip
    },
    brotli: {
        sync: zlib.brotliDecompressSync,
        async: zlib.brotliDecompress
    }
};
function format(buffer, options) {
    return (options === null || options === void 0 ? void 0 : options.buffer) ? buffer : buffer.toString();
}
export async function readFile(path, options) {
    return promises.readFile(path).then((content)=>{
        return new Promise((resolve)=>{
            var _options_compression;
            decompressionMethods[(_options_compression = options === null || options === void 0 ? void 0 : options.compression) !== null && _options_compression !== void 0 ? _options_compression : "none"].async(content, (error, result)=>{
                if (error) {
                    resolve(undefined);
                } else {
                    resolve(format(result, options));
                }
            });
        });
    }).catch(()=>{
        return undefined;
    });
}
export function readFileSync(path, options) {
    try {
        const buffer = fs.readFileSync(path);
        var _options_compression;
        const decompressed = decompressionMethods[(_options_compression = options === null || options === void 0 ? void 0 : options.compression) !== null && _options_compression !== void 0 ? _options_compression : "none"].sync(buffer);
        return format(decompressed, options);
    } catch (e) {
        return undefined;
    }
}
