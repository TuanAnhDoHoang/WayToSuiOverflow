/// <reference types="node" />
/// <reference types="node" />
import zlib from "zlib";
export type CompressionMethod = keyof typeof decompressionMethods;
export type Options = {
    /**
     * Return content as a Buffer. Default: `false`
     */
    buffer?: boolean;
    /**
     * Compression method to decompress the file against. Default: `none`
     */
    compression?: CompressionMethod;
};
declare const decompressionMethods: {
    readonly none: {
        readonly sync: (buffer: Buffer) => Buffer;
        readonly async: (buffer: Buffer, callback: (error: Error | null, result: Buffer) => void) => void;
    };
    readonly gzip: {
        readonly sync: typeof zlib.unzipSync;
        readonly async: typeof zlib.unzip;
    };
    readonly brotli: {
        readonly sync: typeof zlib.brotliDecompressSync;
        readonly async: typeof zlib.brotliDecompress;
    };
};
export type ContentType<O extends Options | undefined = undefined> = O extends {
    buffer: true;
} ? Buffer : string;
export declare function readFile<O extends Options | undefined = undefined>(path: string, options?: O): Promise<ContentType<O> | undefined>;
export declare function readFileSync<O extends Options | undefined = undefined>(path: string, options?: O): ContentType<O> | undefined;
export {};
