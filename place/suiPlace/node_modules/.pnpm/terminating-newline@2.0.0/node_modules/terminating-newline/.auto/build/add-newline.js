import { detectNewline } from "detect-newline";
import endsWith from "ends-with-string";
import { isBuffer, lineFeed } from "./index.js";
function addTerminatingNewlineToBuffer(input, options) {
    var _detectNewline, _ref;
    const newline = (_ref = (_detectNewline = detectNewline(input.toString())) !== null && _detectNewline !== void 0 ? _detectNewline : options === null || options === void 0 ? void 0 : options.default) !== null && _ref !== void 0 ? _ref : lineFeed;
    if (endsWith(input, newline)) {
        return input;
    } else {
        return Buffer.concat([
            input,
            Buffer.from(newline)
        ]);
    }
}
function addTerminatingNewlineToString(input, options) {
    var _detectNewline, _ref;
    const newline = (_ref = (_detectNewline = detectNewline(input)) !== null && _detectNewline !== void 0 ? _detectNewline : options === null || options === void 0 ? void 0 : options.default) !== null && _ref !== void 0 ? _ref : lineFeed;
    if (endsWith(input, newline)) {
        return input;
    } else {
        return input + newline;
    }
}
export default function addTerminatingNewline(input, options) {
    const content = input;
    if (isBuffer(content)) {
        return addTerminatingNewlineToBuffer(content, options);
    } else {
        return addTerminatingNewlineToString(content, options);
    }
}
